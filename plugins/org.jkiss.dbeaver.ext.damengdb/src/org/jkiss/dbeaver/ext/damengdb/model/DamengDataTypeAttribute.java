/*
 * DBeaver - Universal Database Manager
 * Copyright (C) 2010-2024 DBeaver Corp and others
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jkiss.dbeaver.ext.damengdb.model;

import java.sql.ResultSet;

import org.jkiss.dbeaver.model.DBPDataKind;
import org.jkiss.dbeaver.model.DBPEvaluationContext;
import org.jkiss.dbeaver.model.DBUtils;
import org.jkiss.dbeaver.model.impl.jdbc.JDBCUtils;
import org.jkiss.dbeaver.model.meta.Property;
import org.jkiss.dbeaver.model.runtime.DBRProgressMonitor;
import org.jkiss.dbeaver.model.struct.DBSEntityAttribute;
import org.jkiss.dbeaver.model.struct.DBSTypedObjectEx;

/**
 * Dameng data type attribute
 */
public class DamengDataTypeAttribute extends DamengDataTypeMember implements DBSEntityAttribute, DBSTypedObjectEx {
    
	private final DamengDataType attrType;

    public DamengDataTypeAttribute(DBRProgressMonitor monitor, DamengDataType dataType, DamengSubVariable variable,
                                   int number) {
        super(dataType);
        this.name = variable.getName();
        this.attrType = DamengDataType.resolveDataType(monitor, getDataSource(), null, variable.getType());
        this.number = number;
    }

    public DamengDataTypeAttribute(DBRProgressMonitor monitor, DamengDataType dataType, DamengSubParameter parameter,
                                   int number) {
        super(dataType);
        this.name = parameter.getName();
        this.attrType = DamengDataType.resolveDataType(monitor, getDataSource(), null, parameter.getType());
        this.number = number;
    }

    public DamengDataTypeAttribute(DBRProgressMonitor monitor, DamengPackage dmPackage, DamengSubVariable variable,
                                   int number) {
        super(dmPackage);
        this.name = variable.getName();
        this.attrType = DamengDataType.resolveDataType(monitor, getDataSource(), null, variable.getType());
        this.number = number;
    }

    public DamengDataTypeAttribute(DBRProgressMonitor monitor, DamengPackage dmPackage, DamengSubParameter parameter,
                                   int number) {
        super(dmPackage);
        this.name = parameter.getName();
        this.attrType = DamengDataType.resolveDataType(monitor, getDataSource(), null, parameter.getType());
        this.number = number;
    }

    public DamengDataTypeAttribute(DBRProgressMonitor monitor, DamengDataType dataType, ResultSet dbResult) {
        super(dataType, dbResult);
        this.name = JDBCUtils.safeGetString(dbResult, "ATTR_NAME");
        this.number = JDBCUtils.safeGetInt(dbResult, "ATTR_NO");
        this.attrType = DamengDataType.resolveDataType(monitor, getDataSource(),
            JDBCUtils.safeGetString(dbResult, "ATTR_TYPE_OWNER"),
            JDBCUtils.safeGetString(dbResult, "ATTR_TYPE_NAME"));
    }

    @Property(viewable = true, editable = true, order = 3)
    public DamengDataType getDataType() {
        return attrType;
    }

    @Override
    public long getTypeModifiers() {
        return 0;
    }

    @Override
    public int getTypeID() {
        return attrType.getTypeID();
    }

    @Override
    public DBPDataKind getDataKind() {
        return attrType.getDataKind();
    }

    @Override
    public String getTypeName() {
        return attrType.getFullyQualifiedName(DBPEvaluationContext.DDL);
    }

    @Override
    public String getFullTypeName() {
        return DBUtils.getFullTypeName(this);
    }

    @Override
    public boolean isRequired() {
        return false;
    }

    @Override
    public boolean isAutoGenerated() {
        return false;
    }

    @Property(viewable = true, order = 2)
    @Override
    public int getOrdinalPosition() {
        // Number is 0 based
        return number;
    }

    @Override
    public String getDefaultValue() {
        return null;
    }

    @Override
    public String toString() {
        return getParentObject().getFullyQualifiedName(DBPEvaluationContext.UI) + "." + getName();
    }

    @Override
    public Integer getScale() {
        return null;
    }

    @Override
    public Integer getPrecision() {
        return null;
    }

    @Override
    public long getMaxLength() {
        return 0;
    }
    
}
